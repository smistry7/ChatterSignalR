@page "/fetchdata"
@using Chatter.BusinessLogic.Models;
@using Newtonsoft.Json;
@using System.Text;
@using System.Linq;
@using Microsoft.AspNetCore.SignalR.Client;
@using Chatter.WebClient.Services;
@inject HttpClient Http
@implements IObserver<Message>
@inject IHubConnectionProvider _hubConnection

<h1>Blazor Chatter Client</h1>

@if (_messages == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th class="col-8">Message</th>
                <th class="col-4">Sent By</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in _messages)
            {
                <tr>
                    <td class="col-8">@message.Text</td>
                    <td class="col-4">@message.SentBy</td>
                </tr>
            }
        </tbody>

    </table>
    <div class="container">
        <div class="row">
            <input class="col-md-8" @bind="_messageText" type="text" />
            <button @onclick="SendMessage">Send</button>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }
    private List<Message> _messages;
    private string _messageText;
    protected override async Task OnInitializedAsync()
    {
        _messages = await Http.GetFromJsonAsync<List<Message>>("message/getmessages");
        await _hubConnection.BuildSignalrConnection();
        _hubConnection.Subscribe(this);

        _messages.Reverse();
        Modal.Show<Counter>("Counter");
    }

    public async Task SendMessage()
    {
        var message = new Message
        {
            Text = _messageText,
            SentBy = "Blazor",
            SentDate = DateTime.Now,
            GroupId = 1
        };
        var json = JsonConvert.SerializeObject(message);
        var response = await Http.PostAsync("/Message/SendMessage",
            new StringContent(json, Encoding.UTF8, "application/json"));
        _messageText = "";
    }
    
    public void OnCompleted()
    {
       //completed!!!
    }

    public void OnError(Exception e)
    {
        // !!!!Error!!!
    }

    public void OnNext(Message message)
    {
        _messages.Add(message);
        StateHasChanged();
    }


}
